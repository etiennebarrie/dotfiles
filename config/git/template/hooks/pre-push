#!/bin/bash

set -eu

# pre-push hook
#
# # Runs tests before pushing to a remote.
#
# Changes are stashed before running the tests and restored after.
#
# Example: to always pass and skip the usage message
#     $ ln -s /usr/bin/true .git/test
#
# Example: typical Ruby setup
#     $ cat <<EOF >.git/test
#     > #!/bin/sh
#     > echo + bundle exec rake
#     > exec bundle exec rake
#     > EOF
#     $ chmod u+x .git/test
#
# # Protected branches: prevent pushes to these branches.
#
# Usage: add branch names to the .git/protected-branches file
#     $ echo main >>.git/protected-branches

z40=0000000000000000000000000000000000000000

red=
yellow=
bold_yellow=
clear=
if [ -t 2 ]; then
	red="\033[0;31m"
	yellow="\033[0;33m"
	bold_yellow="\033[1;33m"
	clear="\033[m"
fi

p() { >&2 echo "$PS4$*"; "$@"; }

stashed=
return_status=

# while read -r local_ref local_sha remote_ref remote_sha; do
while read -r _ local_sha remote_ref _; do
	if [ "$local_sha" = $z40 ]; then
		: # branch deleted
	elif [ "$local_sha" != "$(git rev-parse @)" ]; then
		>&2 echo -e "$red$0: cannot test SHA that is not checked out, run tests manually and use --no-verify"
		exit 1
	else
		if  [ "$(git status --porcelain | wc -l)" -ne 0 ]; then
			stashed=t
			p git stash --include-untracked --quiet
		fi

		test="$(git rev-parse --git-dir)/test"
		if [ -x "$test" ]; then
			>&2 "$test" || return_status=$?
		else
			>&2 echo -e "$yellow$0: No tests! Make $bold_yellow$test$yellow an executable command to run tests before pushing.$clear"
		fi

		if [ $stashed ]; then
			p git stash pop --index --quiet
		fi
		
		protected_branches="$(git rev-parse --git-dir)/protected-branches"
		if [ -e "$protected_branches" ]; then
			while read -r protected_branch; do
				if [ "$remote_ref" = refs/heads/"$protected_branch" ]; then
					>&2 echo -e "$red$0: $yellow$protected_branch$red is a protected branch"
					exit 1
				fi
			done < "$protected_branches"
		fi

		if [ $return_status ]; then
			>&2 echo -e "$red$0: $yellow$test ${red}failed with exit code $yellow$return_status$red$clear"
			exit $return_status
		fi
	fi
done

exit 0
