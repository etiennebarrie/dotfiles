[commit]
	template = ~/.config/git/commit-template
	verbose = true
[alias]
	an = "!f() { : add --intent-to-add ; git add --intent-to-add \"${1:-.}\"; }; f"
	ap = add --patch
	au = add --update
	base = merge-base @ origin/HEAD
	br = branch
	ci = commit
	cia = commit --amend --no-edit
	ciaa = commit --amend --no-edit --reset-author
	cii = commit --no-verify
	cip = commit --patch
	cl = clean --force -d
	clbr = "!f() { git fetch --prune && git branch --merged origin/HEAD | grep -v ^* | egrep -v '^  master|main$' | xargs git branch -d && for branch in `git branch -vv | grep -v ^* | awk '/: gone]/ {print $1}'`; do git branch -D $branch; done }; f"
	co = "!f() { : checkout ; case \"$1\" in *:*) gh pr checkout \"$@\";; *) git checkout \"$@\";; esac }; f"
	com = checkout origin/HEAD -B main
	cp = cherry-pick
	cpa = cherry-pick --abort
	dc = diff --color-words --cached
	df = diff --color-words
	empty = commit --allow-empty
	fe = "!f() { : git fetch; git fetch ${@:---all --tags}; }; f"
	feco = "!f() { git fetch origin -f $1:$1 && git checkout $1; }; f"
	fixup = commit --fixup
	l = log --graph --decorate --all
	ma = merge --abort
	main = "!f() { git remote set-head origin --auto && git checkout origin/HEAD -B main; }; f"
	new = "!f() { git checkout --orphan ${1:?pass a branch name} --force && git rm -rf --quiet --ignore-unmatch \"$(git rev-parse --show-toplevel)\" && git clean -ffdx --quiet; }; f"
	ol = log --pretty=oneline
	pf = push --force-with-lease
	pff = push --force-with-lease --no-verify
	pfff = push --force-with-lease --no-force-if-includes --no-verify
	pr  = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
	pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref; do branch=${ref#refs/heads/}; git branch -D $branch; done"
	pushu = "!f() { : git push ; git push --set-upstream ${1:-origin} HEAD; }; f"
	r = rebase
	ra = rebase --abort
	rc = -c core.editor=true rebase --continue
	ri = rebase --keep-base origin/HEAD --interactive
	rii = rebase --keep-base origin/HEAD --autosquash
	ro = rebase --onto
	rom = rebase origin/HEAD
	rr = "!f() { git rebase `git base` --exec \"${*:-git test}\"; }; f"
	rs = rebase --skip
	rx = "-c sequence.editor='sed -E -i \"\" \"s/^pick ([0-9a-f]+) \\\\\\$ (.*)/exec { \\2; } \\&\\& git commit -C \\1 ./\" \"$@\"' rebase --interactive"
	s = "!f() { : stash ; if [ $# -eq 0 ]; then git stash --include-untracked --quiet; else git stash \"$@\"; fi; }; f"
	set-head = "!f() { git remote set-head --auto `git config --get --default origin checkout.defaultRemote`; }; f"
	sha = "!f() { local sha=$(git rev-parse --default HEAD $*); printf "%s" $sha | pbcopy; echo $sha; }; f"
	sk = stash push --keep-index --include-untracked --quiet
	sp = stash pop --index --quiet
	ss = stash show
	st = status
	su = submodule update --init --recursive
	suu = "!f() { git submodule update --init --remote && git submodule summary; }; f"
	where-merged = "!f() { git log HEAD ^$@ --ancestry-path --merges --reverse --pretty=%H | head -1; }; f"
	wipp = wip --no-verify
[fetch]
	parallel = 0
	prune = true
	writeCommitGraph = true
[submodule]
	recurse = true
[format]
	pretty = fuller
[pretty]
	sha = %H
[tag]
	sort = version:refname
[versionsort]
	suffix = .alpha
	suffix = .beta
	suffix = .rc
[stash]
	showIncludeUntracked = true
	showPatch = true
[status]
	short = true
	branch = true
[init]
	defaultBranch = main
	templateDir = ~/.config/git/template
[push]
	autoSetupRemote = true
	default = upstream
	useForceIfIncludes = true
[merge]
	ff = false
	tool = vimdiff
	guitool = gvimdiff
	conflictStyle = zdiff3
[mergetool]
	keepBackup = false
[pull]
	rebase = true
	recurse = true
[branch]
	autosetupmerge = true
	sort = -committerdate
[advice]
	commitBeforeMerge = false
	detachedHead = false
	forceDeleteBranch = false
	pushNonFastForward = false
	resolveConflict = false
	skippedCherryPicks = false
	statusHints = false
[rerere]
	enabled = true
[diff]
	algorithm = histogram
	colorMoved = plain
	mnemonicPrefix = true
	renames = true
[rebase]
	autoSquash = true
	autoStash = true
	updateRefs = true
	rescheduleFailedExec = true
[help]
	autoCorrect = prompt
[interactive]
	singlekey = true
[user]
	name = Étienne Barrié
	useconfigonly = true
[column]
	ui = auto row dense
[log]
	date = iso
[blame]
	markIgnoredLines = true
	markUnblamableLines = true
[protocol]
	version = 2
[core]
	commitGraph = true
[gc]
	writeCommitGraph = true
[absorb]
	autoStageIfNothingStaged = true
[include]
	path = local
