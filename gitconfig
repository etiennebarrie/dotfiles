[color]
	ui = auto
[alias]
	an = add --intent-to-add
	ap = add --patch
	au = add --update
	br = branch
	ci = commit
	cia = commit --amend --no-edit
	ciaa = commit --amend --no-edit --reset-author
	cip = commit --patch
	co = checkout
	com = checkout origin/master -B master
	cp = cherry-pick
	cpa = cherry-pick --abort
	dc = diff --color-words --cached
	df = diff --color-words
	fe = fetch
	l = log --graph --decorate --all
	ma = merge --abort
	ol = log --pretty=oneline
	pr  = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
	pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"
	pushu = push --set-upstream origin HEAD
	r = rebase
	ra = rebase --abort
	rc = rebase --continue
	ri = "!git rebase --interactive `git merge-base @ origin/master`"
	rii = "!EDITOR=true git rebase --interactive `git merge-base @ origin/master`"
	ro = rebase --onto
	rom = rebase origin/master
	rs = rebase --skip
	s = stash
	sha = "!f() { git rev-parse --default HEAD $* |tee /dev/tty |tr -d '\n' |pbcopy; }; f"
	sk = stash --keep-index
	sp = stash pop
	ss = show stash
	st = status -sb
	su = submodule update --init
	where-merged = "!f() { git log HEAD ^$@ --ancestry-path --merges --reverse --pretty=%H | head -1; }; f"
	x = !gitx
[core]
	excludesfile = ~/.gitignore
[fetch]
	prune = true
[push]
	default = upstream
[merge]
	ff = false
[branch]
	autosetuprebase = always
	autosetupmerge = true
[advice]
	pushNonFastForward = false
	statusHints = false
	commitBeforeMerge = false
	resolveConflict = false
	detachedHead = false
[rerere]
	enabled = true
[diff]
	algorithm = minimal
	renames = true
[rebase]
	autosquash = true
	autostash = true
[help]
	autocorrect = 1
[interactive]
	singlekey = true
[user]
	name = Étienne Barrié
[column]
	ui = auto row dense
